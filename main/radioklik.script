local helper = require("main.helper")
local camera = require "orthographic.camera"
local CAMERA_ID = hash("/camera")
local UPDATE_RADIO_BUTTON = hash("radio_button_update")


local radio_buttons_collider = {}
local current_cursor = 1
local speedSlide = 0.3

function init(self)
	-- Add initialization code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
	msg.post(".", "acquire_input_focus")
	local sizeImg = go.get("/radio_button1#sprite", "size") 
	for i =1, 2, 1 do
		local pos = go.get("radio_button" .. i, "position")
		local rectangle = {x = pos.x -sizeImg.x*.5, y = pos.y-sizeImg.y*.5, width = sizeImg.x, height = sizeImg.y}
		table.insert(radio_buttons_collider, rectangle)
	end

	local rectangle = {x = 1, y = 2, width = 3, height = 4}
	
	msg.post(".", "radio_button_update", {isAnimate=false})
end

local function move_slide(self, slide, isAnimate)
	if(slide == 1) then
		if(isAnimate) then
			go.animate("tutorial_holder_1", "position.x", go.PLAYBACK_ONCE_FORWARD, -115, go.EASING_LINEAR, speedSlide)
			go.animate("tutorial_holder_2", "position.x", go.PLAYBACK_ONCE_FORWARD, 1000, go.EASING_LINEAR, speedSlide)
		else
			go.set("tutorial_holder_1", "position.x",  -115)
			go.set("tutorial_holder_2", "position.x",  1000)
		end
	else 
		if(isAnimate) then
			go.animate("tutorial_holder_1", "position.x", go.PLAYBACK_ONCE_FORWARD, -1000, go.EASING_LINEAR, speedSlide)
			go.animate("tutorial_holder_2", "position.x", go.PLAYBACK_ONCE_FORWARD, 0, go.EASING_LINEAR, speedSlide)
		else
			go.set("tutorial_holder_1", "position.x",  -1000)
			go.set("tutorial_holder_2", "position.x",  0)
		end
	end
end

local function radio_button_update(self, isAnimate)
	if current_cursor == 1 then
		go.set("/radio_button1#sprite", "cursor", 0.5)
		go.set("/radio_button2#sprite", "cursor", 0)
		move_slide(self, 1, isAnimate)
	else 
		go.set("/radio_button1#sprite", "cursor", 0)
		go.set("/radio_button2#sprite", "cursor", 0.5)
		move_slide(self, 2, isAnimate)
	end
end

function final(self)
	-- Add finalization code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function update(self, dt)
	-- Add update code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function on_message(self, message_id, message, sender)
	-- Add message-handling code here
	-- Learn more: https://defold.com/manuals/message-passing/
	-- Remove this function if not needed
	if message_id == UPDATE_RADIO_BUTTON then
		local isAnimate = message.isAnimate or false
		radio_button_update(self, isAnimate)
	end
end

local function checkAllRadioButtonCollide(self, position)
	--table.foreach(radio_buttons_collider, print)
	for key,value in ipairs(radio_buttons_collider) do 
		--print(key,value) 
		local check = helper.checkCollide(position, value)
		if(check == true)then
			current_cursor = key
			break
		end
	end
end

function on_input(self, action_id, action)
	-- Add input-handling code here. The game object this script is attached to
	-- must have acquired input focus:
	--
	--    msg.post(".", "acquire_input_focus")
	--
	-- All mapped input bindings will be received. Mouse and touch input will
	-- be received regardless of where on the screen it happened.
	-- Learn more: https://defold.com/manuals/input/
	-- Remove this function if not needed
	if action_id == hash("touch") and action.pressed then -- <2>
		local actionPosition = vmath.vector3(action.x, action.y, 0)
		local cursorPos = camera.screen_to_world(CAMERA_ID, actionPosition)
		checkAllRadioButtonCollide(self, cursorPos)
		radio_button_update(self, true)
	end
end

function on_reload(self)
	-- Add reload-handling code here
	-- Learn more: https://defold.com/manuals/hot-reload/
	-- Remove this function if not needed
end
